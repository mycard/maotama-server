// Generated by CoffeeScript 1.7.1
(function() {
  var WebSocketServer, dgram, http, http_server, ip, originIsAllowed, wsServer;

  ip = "117.121.26.153";

  originIsAllowed = function(origin) {
    return true;
  };

  WebSocketServer = require("websocket").server;

  http = require("http");

  dgram = require("dgram");

  http_server = http.createServer(function(request, response) {
    console.log((new Date()) + " Received request for " + request.url);
    response.writeHead(404);
    response.end();
  });

  http_server.listen(10800, function() {
    return console.log((new Date()) + " Server is listening on port 8080");
  });

  wsServer = new WebSocketServer({
    httpServer: http_server,
    autoAcceptConnections: false
  });

  wsServer.on("request", function(request) {
    var clients, connection, server;
    if (!originIsAllowed(request.origin)) {
      request.reject();
      console.log((new Date()) + " Connection from origin " + request.origin + " rejected.");
      return;
    }
    connection = request.accept("shinkirou", request.origin);
    console.log((new Date()) + " Connection accepted.");
    server = dgram.createSocket('udp4');
    clients = {};
    server.on('listening', function() {
      return connection.send("LISTEN " + ip + ":" + (server.address().port));
    });
    server.on('message', function(message, remote) {
      var client;
      if (!clients[remote.port]) {
        client = clients[remote.port] = dgram.createSocket('udp4');
        client.on('listening', function() {
          return connection.send("PUNCH " + ip + ":" + (client.address().port));
        });
        client.on('message', function(message, server_info) {
          if (!client.server_info) {
            connection.send("PUNCHOK " + ip + ":" + (client.address().port));
            return client.server_info = server_info;
          } else {
            return server.send(message, 0, message.length, remote.port, remote.address);
          }
        });
        return client.bind();
      } else if (clients[remote.port].server_info) {
        client = clients[remote.port];
        return client.send(message, 0, message.length, client.server_info.port, client.server_info.address);
      }
    });
    server.bind();
    return connection.on("close", function(reasonCode, description) {
      return console.log((new Date()) + " Peer " + connection.remoteAddress + " disconnected.");
    });
  });

}).call(this);
